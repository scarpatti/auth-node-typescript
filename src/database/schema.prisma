// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  name     String
  email    String     @unique
  password String
  phone    String?
  status   UserStatus @default(ACTIVE)

  roleId Int  @map("role_id")
  Role   Role @relation(fields: [roleId], references: [id])

  Permissions Permission[]

  companyId String  @map("company_id")
  Company   Company @relation(fields: [companyId], references: [id])

  @@map("users")
}

model PermissionType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  type        String  @unique
  name        String
  description String?

  Permissions Permission[]

  @@map("permission_types")
}

model Permission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  slug        String  @unique
  name        String
  description String?

  permissionTypeId Int            @map("permission_type_id")
  PermissionType   PermissionType @relation(fields: [permissionTypeId], references: [id])

  Roles Role[]
  Users User[]

  @@map("permissions")
}

model RoleType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  name        String  @unique
  description String?

  Roles Role[]

  @@map("role_types")
}

model Role {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  name        String  @unique
  description String?

  roleTypeId Int      @map("role_type_id")
  RoleType   RoleType @relation(fields: [roleTypeId], references: [id])

  Permissions Permission[]
  Users       User[]

  @@map("roles")
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
}

model Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  name String
  cnpj String @unique

  status CompanyStatus @default(ACTIVE)

  Users User[]

  Plots    Plot[]
  Zones    Zone[]
  Sections Section[]

  Pumps Pump[]
  Reels Reel[]

  @@map("companies")
}

model Plot {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  name String @unique

  companyId String  @map("company_id")
  Company   Company @relation(fields: [companyId], references: [id])

  @@map("plots")
}

model Zone {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  name String @unique

  companyId String  @map("company_id")
  Company   Company @relation(fields: [companyId], references: [id])

  @@map("zones")
}

model Section {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  name String @unique

  companyId String  @map("company_id")
  Company   Company @relation(fields: [companyId], references: [id])

  @@map("sections")
}

enum PumpType {
  MOTO
  ELETRO
}

model Pump {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  type PumpType

  deviceCode Int    @map("device_code")
  fleet      String
  model      String
  power      Int

  companyId String  @map("company_id")
  Company   Company @relation(fields: [companyId], references: [id])

  @@unique([deviceCode, companyId])
  @@map("pumps")
}

model Reel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  deviceCode   Int    @map("device_code")
  fleet        String
  hoseLength   Int    @map("hose_length")
  hoseDiameter Int    @map("hose_diameter")

  companyId String  @map("company_id")
  Company   Company @relation(fields: [companyId], references: [id])

  @@unique([deviceCode, companyId])
  @@map("reels")
}
